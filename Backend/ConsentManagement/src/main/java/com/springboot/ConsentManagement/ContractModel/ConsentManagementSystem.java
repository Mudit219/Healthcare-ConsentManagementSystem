package com.springboot.ConsentManagement.ContractModel;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.0.
 */
public class ConsentManagementSystem extends Contract {
    private static final String BINARY = "608060405260006005553480156200001657600080fd5b50604051620064ae380380620064ae83398101806040526200003c91908101906200017a565b60008054600160a060020a03199081163217909155600180549091163317905580516200007190600290602084019062000079565b50506200023c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000bc57805160ff1916838001178555620000ec565b82800160010185558215620000ec579182015b82811115620000ec578251825591602001919060010190620000cf565b50620000fa929150620000fe565b5090565b6200011b91905b80821115620000fa576000815560010162000105565b90565b6000601f820183136200013057600080fd5b8151620001476200014182620001e1565b620001ba565b915080825260208301602083018583830111156200016457600080fd5b6200017183828462000209565b50505092915050565b6000602082840312156200018d57600080fd5b81516001604060020a03811115620001a457600080fd5b620001b2848285016200011e565b949350505050565b6040518181016001604060020a0381118282101715620001d957600080fd5b604052919050565b60006001604060020a03821115620001f857600080fd5b506020601f91909101601f19160190565b60005b83811015620002265781810151838201526020016200020c565b8381111562000236576000848401525b50505050565b616262806200024c6000396000f3fe60806040523480156200001157600080fd5b5060043610620001405760003560e060020a900480638985697311620000c1578063a3639ac5116200007f578063a3639ac5146200029c578063a8f2efd814620002a6578063aae2097514620002bd578063cd3f35e014620002d4578063f153298314620002fa5762000140565b80638985697314620002275780638aa2fdea146200023e5780638e219fe614620002555780638fc046d2146200026e578063983f5d7a14620002855762000140565b806329ddda24116200010f57806329ddda2414620001ae5780633ba34aac14620001c557806340ab301e14620001dc578063654955c714620001f5578063893d20e8146200020e5762000140565b8063063d6d4114620001455780630f354dd6146200015e578063127810bc14620001755780632197bdfa1462000197575b600080fd5b6200015c620001563660046200229e565b62000304565b005b6200015c6200016f36600462002338565b62000585565b6200017f62000618565b6040516200018e919062002748565b60405180910390f35b6200015c620001a83660046200244a565b620006af565b6200015c620001bf366004620022e0565b6200087f565b6200015c620001d63660046200229e565b62000dbc565b620001e66200138a565b6040516200018e9190620026f2565b620001ff6200148f565b6040516200018e919062002728565b62000218620014fd565b6040516200018e91906200262e565b620001e6620002383660046200229e565b6200150c565b6200015c6200024f3660046200244a565b62001634565b6200025f6200171e565b6040516200018e91906200275b565b6200015c6200027f3660046200248c565b62001724565b6200015c6200029636600462002338565b62001c49565b620001ff62001cdc565b6200015c620002b73660046200236d565b62001d4a565b620001e6620002ce3660046200229e565b62001e5f565b620002eb620002e5366004620022e0565b62001f27565b6040516200018e919062002718565b620002eb62001ffa565b32600081815260036020526040902054600160a060020a031681146200032957600080fd5b600160a060020a0380831660009081526007602052604080822054328352912054908216911662000359620020bf565b60405160e260020a63045ccd29028152600160a060020a0383169063117334a4906200038c90889087906004016200263e565b6040805180830381600087803b158015620003a657600080fd5b505af1158015620003bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620003e1919081019062002415565b600160a060020a031660208301521580158252620004025750505062000581565b602081015160405160e160020a632e69ec6d028152600160a060020a03851691635cd3d8da9162000437919060040162002728565b600060405180830381600087803b1580156200045257600080fd5b505af115801562000467573d6000803e3d6000fd5b505050602082015160405160e160020a632e69ec6d028152600160a060020a0385169250635cd3d8da916200049f9160040162002728565b600060405180830381600087803b158015620004ba57600080fd5b505af1158015620004cf573d6000803e3d6000fd5b505050508060200151600160a060020a0316632e49d78b60026040518263ffffffff1660e060020a02815260040162000509919062002738565b600060405180830381600087803b1580156200052457600080fd5b505af115801562000539573d6000803e3d6000fd5b505050507f4c0f9a5e735f2b8219dc1fb00b8a79f722c42ba1d7085827fdd8318c907692718160200151600260405162000575929190620026af565b60405180910390a15050505b5050565b600054600160a060020a03163281146200059e57600080fd5b6000838330620005ad620020d6565b620005bb939291906200265d565b604051809103906000f080158015620005d8573d6000803e3d6000fd5b50600160a060020a039485166000908152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19169190951617909355505050565b60028054604080516020601f6000196101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015620006a55780601f106200067957610100808354040283529160200191620006a5565b820191906000526020600020905b8154815290600101906020018083116200068757829003601f168201915b5050505050905090565b604080519081016040528082600160a060020a0316637b0f9a366040518163ffffffff1660e060020a02815260040160206040518083038186803b158015620006f757600080fd5b505afa1580156200070c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620007329190810190620022bf565b600160a060020a0316600160a060020a0316815260200182600160a060020a0316633aaa59206040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156200078657600080fd5b505afa1580156200079b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620007c19190810190620022bf565b600160a060020a03169052620007d881326200202a565b1515600114620007e757600080fd5b81600160a060020a031663ea8a1af06040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156200082657600080fd5b505af11580156200083b573d6000803e3d6000fd5b505050507f4c0f9a5e735f2b8219dc1fb00b8a79f722c42ba1d7085827fdd8318c9076927182600360405162000873929190620026af565b60405180910390a15050565b600160a060020a0380831660009081526007602052604080822054328084529190922054909285926001929082169116620008b9620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a490620008ec90899086906004016200263e565b6040805180830381600087803b1580156200090657600080fd5b505af11580156200091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000941919081019062002415565b600160a060020a03166020830152151581526200095d620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a4906200099090899088906004016200263e565b6040805180830381600087803b158015620009aa57600080fd5b505af1158015620009bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620009e5919081019062002415565b600160a060020a03166020830152151581528151801562000a98575084600381111562000a0e57fe5b8260200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b15801562000a4f57600080fd5b505afa15801562000a64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000a8a91908101906200246b565b600381111562000a9657fe5b145b8062000b4057508051801562000b40575084600381111562000ab657fe5b8160200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b15801562000af757600080fd5b505afa15801562000b0c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000b3291908101906200246b565b600381111562000b3e57fe5b145b151562000b4c57600080fd5b3260009081526006602052604080822054600160a060020a038c811684529190922054918116911662000b7e620020bf565b6040517fa4914c4e000000000000000000000000000000000000000000000000000000008152600160a060020a0384169063a4914c4e9062000bc7908f9086906004016200263e565b6040805180830381600087803b15801562000be157600080fd5b505af115801562000bf6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000c1c919081019062002415565b600160a060020a03166020830152151580825262000d0657602081015160405160e260020a63215aee73028152600160a060020a0385169163856bb9cc9162000c69919060040162002728565b600060405180830381600087803b15801562000c8457600080fd5b505af115801562000c99573d6000803e3d6000fd5b505050602082015160405160e260020a63215aee73028152600160a060020a038516925063856bb9cc9162000cd19160040162002728565b600060405180830381600087803b15801562000cec57600080fd5b505af115801562000d01573d6000803e3d6000fd5b505050505b8060200151600160a060020a0316634ca334e28c6040518263ffffffff1660e060020a02815260040162000d3b919062002705565b600060405180830381600087803b15801562000d5657600080fd5b505af115801562000d6b573d6000803e3d6000fd5b505050507fd4051b956164a3a4af1ab93acb039acf029149f97597ef38cce8974d7898a3e581602001518c60405162000da69291906200268b565b60405180910390a1505050505050505050505050565b3260008181526007602052604080822054600160a060020a0380861684529190922054849392600292908116911662000df4620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a49062000e2790899086906004016200263e565b6040805180830381600087803b15801562000e4157600080fd5b505af115801562000e56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000e7c919081019062002415565b600160a060020a031660208301521515815262000e98620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a49062000ecb90899088906004016200263e565b6040805180830381600087803b15801562000ee557600080fd5b505af115801562000efa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000f20919081019062002415565b600160a060020a03166020830152151581528151801562000fd3575084600381111562000f4957fe5b8260200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b15801562000f8a57600080fd5b505afa15801562000f9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000fc591908101906200246b565b600381111562000fd157fe5b145b806200107b5750805180156200107b575084600381111562000ff157fe5b8160200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156200103257600080fd5b505afa15801562001047573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200106d91908101906200246b565b60038111156200107957fe5b145b15156200108757600080fd5b3260009081526007602052604080822054600160a060020a038b8116845291909220549181169116620010b9620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a490620010ec908e9086906004016200263e565b6040805180830381600087803b1580156200110657600080fd5b505af11580156200111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001141919081019062002415565b600160a060020a0316602083015215801580835290620011e8575060018160200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156200119f57600080fd5b505afa158015620011b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620011da91908101906200246b565b6003811115620011e657fe5b145b15620011f75750505062001380565b80511515620012d257602081015160405160e160020a632e69ec6d028152600160a060020a03851691635cd3d8da9162001235919060040162002728565b600060405180830381600087803b1580156200125057600080fd5b505af115801562001265573d6000803e3d6000fd5b505050602082015160405160e160020a632e69ec6d028152600160a060020a0385169250635cd3d8da916200129d9160040162002728565b600060405180830381600087803b158015620012b857600080fd5b505af1158015620012cd573d6000803e3d6000fd5b505050505b8060200151600160a060020a0316632e49d78b60016040518263ffffffff1660e060020a02815260040162001308919062002738565b600060405180830381600087803b1580156200132357600080fd5b505af115801562001338573d6000803e3d6000fd5b505050507f4c0f9a5e735f2b8219dc1fb00b8a79f722c42ba1d7085827fdd8318c907692718160200151600160405162001374929190620026af565b60405180910390a15050505b5050505050505050565b3260008181526003602052604090205460609190600160a060020a0316811480620013cf5750600160a060020a03808216600081815260046020526040902054909116145b1515620013db57600080fd5b326000908152600660205260408082205481517fda5269a60000000000000000000000000000000000000000000000000000000081529151600160a060020a0390911692606092849263da5269a692600480840193919291829003018186803b1580156200144857600080fd5b505afa1580156200145d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014879190810190620023bb565b935050505090565b32600081815260036020526040812054909190600160a060020a0316811480620014d35750600160a060020a03808216600081815260046020526040902054909116145b1515620014df57600080fd5b505032600090815260076020526040902054600160a060020a031690565b600054600160a060020a031690565b6000546060903290600160a060020a0316811480620015455750600160a060020a03808216600081815260036020526040902054909116145b806200156b5750600160a060020a03808216600081815260046020526040902054909116145b15156200157757600080fd5b600160a060020a03808416600090815260076020526040908190205490517f46bc6c8800000000000000000000000000000000000000000000000000000000815291169081906346bc6c8890620015d49060019060040162002738565b60006040518083038186803b158015620015ed57600080fd5b505afa15801562001602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200162c9190810190620023bb565b949350505050565b80600160a060020a0316637b0f9a366040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156200167157600080fd5b505afa15801562001686573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620016ac9190810190620022bf565b32600160a060020a03821614620016c257600080fd5b81600160a060020a031663ea8a1af06040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156200170157600080fd5b505af115801562001716573d6000803e3d6000fd5b505050505050565b60055490565b3260008181526007602052604080822054600160a060020a038086168452919092205484939260019290811691166200175c620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a4906200178f90899086906004016200263e565b6040805180830381600087803b158015620017a957600080fd5b505af1158015620017be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620017e4919081019062002415565b600160a060020a031660208301521515815262001800620020bf565b60405160e260020a63045ccd29028152600160a060020a0384169063117334a4906200183390899088906004016200263e565b6040805180830381600087803b1580156200184d57600080fd5b505af115801562001862573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001888919081019062002415565b600160a060020a0316602083015215158152815180156200193b5750846003811115620018b157fe5b8260200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b158015620018f257600080fd5b505afa15801562001907573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200192d91908101906200246b565b60038111156200193957fe5b145b80620019e3575080518015620019e357508460038111156200195957fe5b8160200151600160a060020a0316634e69d5606040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156200199a57600080fd5b505afa158015620019af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620019d591908101906200246b565b6003811115620019e157fe5b145b1515620019ef57600080fd5b3260009081526006602052604080822054600160a060020a038b811684529190922054918116911662001a21620020bf565b6040517fa4914c4e000000000000000000000000000000000000000000000000000000008152600160a060020a0384169063a4914c4e9062001a6a908e9086906004016200263e565b6040805180830381600087803b15801562001a8457600080fd5b505af115801562001a99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001abf919081019062002415565b600160a060020a03166020830152151580825262001ba957602081015160405160e260020a63215aee73028152600160a060020a0385169163856bb9cc9162001b0c919060040162002728565b600060405180830381600087803b15801562001b2757600080fd5b505af115801562001b3c573d6000803e3d6000fd5b505050602082015160405160e260020a63215aee73028152600160a060020a038516925063856bb9cc9162001b749160040162002728565b600060405180830381600087803b15801562001b8f57600080fd5b505af115801562001ba4573d6000803e3d6000fd5b505050505b8060200151600160a060020a031663f998292a8d6040518263ffffffff1660e060020a02815260040162001bde919062002748565b600060405180830381600087803b15801562001bf957600080fd5b505af115801562001c0e573d6000803e3d6000fd5b505050507fee282a0323baa12981fd5ba7a2392b736e8bf63a42d85e260f4708d8b8880c3581602001518d60405162000da6929190620026ce565b600054600160a060020a031632811462001c6257600080fd5b600083833062001c71620020e7565b62001c7f939291906200265d565b604051809103906000f08015801562001c9c573d6000803e3d6000fd5b50600160a060020a039485166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff19169190951617909355505050565b32600081815260036020526040812054909190600160a060020a031681148062001d205750600160a060020a03808216600081815260046020526040902054909116145b151562001d2c57600080fd5b505032600090815260066020526040902054600160a060020a031690565b600054600160a060020a031632811462001d6357600080fd5b62001da4826040805190810160405280600681526020017f646f63746f72000000000000000000000000000000000000000000000000000081525062002084565b1562001e0157600160a060020a0383166000818152600460205260408120805473ffffffffffffffffffffffffffffffffffffffff191690921790915562001dee90849062000585565b62001dfb83600062001c49565b62001e51565b600160a060020a0383166000818152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff1916909117905562001e4483600162000585565b62001e5183600162001c49565b505060058054600101905550565b6000546060903290600160a060020a031681148062001e985750600160a060020a03808216600081815260036020526040902054909116145b8062001ebe5750600160a060020a03808216600081815260046020526040902054909116145b151562001eca57600080fd5b600160a060020a03808416600090815260076020526040908190205490517f46bc6c8800000000000000000000000000000000000000000000000000000000815291169081906346bc6c8890620015d49060029060040162002738565b60008054600160a060020a031632811462001f4157600080fd5b600160a060020a03808516600090815260066020526040908190205490517f12ab907800000000000000000000000000000000000000000000000000000000815291169081906312ab90789062001f9d90879060040162002705565b60206040518083038186803b15801562001fb657600080fd5b505afa15801562001fcb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001ff19190810190620023f4565b95945050505050565b32600081815260046020526040812054909190600160a060020a031681146200202257600080fd5b600191505090565b6000805b60028110156200207857600160a060020a0383168482600281106200204f57fe5b6020020151600160a060020a031614156200206f5760019150506200207e565b6001016200202e565b50600090505b92915050565b600062002092838362002099565b9392505050565b600081518351148015620020925750508051602091820120825192909101919091201490565b604080518082019091526000808252602082015290565b60405161263d80620028b883390190565b6040516113348062004ef583390190565b6000620020928235620027e8565b6000620020928251620027e8565b6000601f820183136200212657600080fd5b81516200213d620021378262002793565b6200276b565b915081818352602084019350602081019050838560208402820111156200216357600080fd5b60005b838110156200219357816200217c888262002106565b845250602092830192919091019060010162002166565b5050505092915050565b6000601f82018313620021af57600080fd5b8135620021c0620021378262002793565b81815260209384019390925082018360005b83811015620021935781358601620021eb888262002248565b8452506020928301929190910190600101620021d2565b6000620020928251620027f5565b600062002092823562002827565b600062002092825162002827565b600062002092823562002834565b600062002092825162002844565b6000601f820183136200225a57600080fd5b81356200226b6200213782620027b5565b915080825260208301602083018583830111156200228857600080fd5b620022958382846200286e565b50505092915050565b600060208284031215620022b157600080fd5b60006200162c8484620020f8565b600060208284031215620022d257600080fd5b60006200162c848462002106565b60008060408385031215620022f457600080fd5b6000620023028585620020f8565b925050602083013567ffffffffffffffff8111156200232057600080fd5b6200232e858286016200219d565b9150509250929050565b600080604083850312156200234c57600080fd5b60006200235a8585620020f8565b92505060206200232e858286016200222c565b600080604083850312156200238157600080fd5b60006200238f8585620020f8565b925050602083013567ffffffffffffffff811115620023ad57600080fd5b6200232e8582860162002248565b600060208284031215620023ce57600080fd5b815167ffffffffffffffff811115620023e657600080fd5b6200162c8482850162002114565b6000602082840312156200240757600080fd5b60006200162c848462002202565b600080604083850312156200242957600080fd5b600062002437858562002202565b92505060206200232e858286016200221e565b6000602082840312156200245d57600080fd5b60006200162c848462002210565b6000602082840312156200247e57600080fd5b60006200162c84846200223a565b60008060408385031215620024a057600080fd5b823567ffffffffffffffff811115620024b857600080fd5b620024c68582860162002248565b92505060206200232e85828601620020f8565b620024e481620027e8565b82525050565b6000620024f782620027e4565b8084526020840193506200250b83620027de565b60005b82811015620025415762002524868351620024d9565b6200252f82620027de565b6020969096019591506001016200250e565b5093949350505050565b60006200255882620027e4565b808452602084019350836020820285016200257385620027de565b60005b84811015620025b057838303885262002591838351620025e8565b92506200259e82620027de565b60209890980197915060010162002576565b50909695505050505050565b620024e481620027f5565b620024e48162002827565b620024e48162002854565b620024e48162002861565b6000620025f582620027e4565b8084526200260b8160208601602086016200287a565b6200261681620028ad565b9093016020019392505050565b620024e48162002824565b602081016200207e8284620024d9565b604081016200264e8285620024d9565b620020926020830184620025c7565b606081016200266d8286620024d9565b6200267c6020830185620025d2565b6200162c6040830184620024d9565b604081016200269b8285620024d9565b81810360208301526200162c81846200254b565b60408101620026bf8285620024d9565b620020926020830184620025dd565b60408101620026de8285620024d9565b81810360208301526200162c8184620025e8565b60208082528101620020928184620024ea565b602080825281016200209281846200254b565b602081016200207e8284620025bc565b602081016200207e8284620025c7565b602081016200207e8284620025dd565b60208082528101620020928184620025e8565b602081016200207e828462002623565b60405181810167ffffffffffffffff811182821017156200278b57600080fd5b604052919050565b600067ffffffffffffffff821115620027ab57600080fd5b5060209081020190565b600067ffffffffffffffff821115620027cd57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b60006200207e8262002818565b151590565b6000600382106200280757fe5b5090565b6000600482106200280757fe5b600160a060020a031690565b90565b60006200207e82620027e8565b6000600382106200280757600080fd5b6000600482106200280757600080fd5b60006200207e82620027fa565b60006200207e826200280b565b82818337506000910152565b60005b83811015620028975781810151838201526020016200287d565b83811115620028a7576000848401525b50505050565b601f01601f19169056fe608060405234801561001057600080fd5b506040516060806200263d833981018060405261003091908101906100bc565b60008054600160a060020a03808416600160a060020a03199283161790925560018054928616929091169190911780825583919060a060020a60ff0219167401000000000000000000000000000000000000000083600281111561009057fe5b0217905550505050610139565b60006100a98251610115565b9392505050565b60006100a98251610126565b6000806000606084860312156100d157600080fd5b60006100dd868661009d565b93505060206100ee868287016100b0565b92505060406100ff8682870161009d565b9150509250925092565b600160a060020a031690565b600061012082610109565b92915050565b60006003821061013557600080fd5b5090565b6124f480620001496000396000f3fe60806040523480156200001157600080fd5b50600436106200007a577c0100000000000000000000000000000000000000000000000000000000600035046312ab907881146200007f578063856bb9cc14620000ae578063893d20e814620000c7578063a4914c4e14620000e0578063da5269a61462000107575b600080fd5b6200009662000090366004620009ac565b62000120565b604051620000a5919062000b3b565b60405180910390f35b620000c5620000bf36600462000a1e565b62000284565b005b620000d16200034b565b604051620000a5919062000ad2565b620000f7620000f13660046200096d565b6200035a565b604051620000a592919062000b4b565b620001116200062b565b604051620000a5919062000b28565b600154600090600160a060020a0316321480620001475750600054600160a060020a031633145b15156200015357600080fd5b600060015474010000000000000000000000000000000000000000900460ff1660028111156200017f57fe5b14156200027f5760006060815b60025481101562000277576002805482908110620001a657fe5b6000918252602082200154604080517f40ab301e0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216926340ab301e92600480840193829003018186803b1580156200020757600080fd5b505afa1580156200021c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002469190810190620009e5565b9150620002548286620006a8565b85519301928314156200026e57600193505050506200027f565b6001016200018c565b506000925050505b919050565b600154600160a060020a0316321480620002a85750600054600160a060020a031633145b1515620002b457600080fd5b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905560405130907f1398fb997798573a4f33a35360688747a7eb90249ab5cec65da9e5b1945ecdae906200034090849062000ad2565b60405180910390a250565b600154600160a060020a031690565b6001546000908190600160a060020a031632146200037757600080fd5b600060015474010000000000000000000000000000000000000000900460ff166002811115620003a357fe5b1415620005165760005b600254811015620004bd5784600160a060020a0316600282815481101515620003d257fe5b60009182526020918290200154604080517f7b0f9a360000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692637b0f9a3692600480840193829003018186803b1580156200043557600080fd5b505afa1580156200044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000470919081019062000944565b600160a060020a03161415620004b45760016002828154811015156200049257fe5b600091825260209091200154909350600160a060020a03169150620006249050565b600101620003ad565b506001546000908590600160a060020a03168530620004db6200078c565b620004ea949392919062000ae2565b604051809103906000f08015801562000507573d6000803e3d6000fd5b50600093509150620006249050565b60005b600254811015620006075784600160a060020a03166002828154811015156200053e57fe5b60009182526020918290200154604080517f3aaa59200000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633aaa592092600480840193829003018186803b158015620005a157600080fd5b505afa158015620005b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620005dc919081019062000944565b600160a060020a03161415620005fe5760016002828154811015156200049257fe5b60010162000519565b50600154600090600160a060020a0316853086620004db6200078c565b9250929050565b600154606090600160a060020a031632146200064657600080fd5b60028054806020026020016040519081016040528092919081815260200182805480156200069e57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116200067f575b5050505050905090565b600080805b8351811015620006f157620006db858583815181101515620006cb57fe5b90602001906020020151620006fb565b15620006e8576001820191505b600101620006ad565b5090505b92915050565b6000805b835181101562000747576200072d84828151811015156200071c57fe5b906020019060200201518462000751565b156200073e576001915050620006f5565b600101620006ff565b5060009392505050565b60006200075f838362000766565b9392505050565b6000815183511480156200075f5750508051602091820120825192909101919091201490565b60405161185c8062000c5f83390190565b60006200075f825162000be7565b60006200075f823562000be7565b6000601f82018313620007cb57600080fd5b8135620007e2620007dc8262000b92565b62000b6a565b81815260209384019390925082018360005b838110156200082457813586016200080d8882620008a1565b8452506020928301929190910190600101620007f4565b5050505092915050565b6000601f820183136200084057600080fd5b815162000851620007dc8262000b92565b81815260209384019390925082018360005b838110156200082457815186016200087c8882620008f7565b845250602092830192919091019060010162000863565b60006200075f823562000c05565b6000601f82018313620008b357600080fd5b8135620008c4620007dc8262000bb4565b91508082526020830160208301858383011115620008e157600080fd5b620008ee83828462000c1f565b50505092915050565b6000601f820183136200090957600080fd5b81516200091a620007dc8262000bb4565b915080825260208301602083018583830111156200093757600080fd5b620008ee83828462000c2b565b6000602082840312156200095757600080fd5b60006200096584846200079d565b949350505050565b600080604083850312156200098157600080fd5b60006200098f8585620007ab565b9250506020620009a28582860162000893565b9150509250929050565b600060208284031215620009bf57600080fd5b813567ffffffffffffffff811115620009d757600080fd5b6200096584828501620007b9565b600060208284031215620009f857600080fd5b815167ffffffffffffffff81111562000a1057600080fd5b62000965848285016200082e565b60006020828403121562000a3157600080fd5b600062000965848462000893565b62000a4a8162000c12565b82525050565b62000a4a8162000be7565b600062000a688262000be3565b80845260208401935062000a7c8362000bdd565b60005b8281101562000ab25762000a9586835162000a50565b62000aa08262000bdd565b60209690960195915060010162000a7f565b5093949350505050565b62000a4a8162000bf4565b62000a4a8162000c05565b60208101620006f5828462000a50565b6080810162000af2828762000a3f565b62000b01602083018662000a50565b62000b10604083018562000a50565b62000b1f606083018462000a50565b95945050505050565b602080825281016200075f818462000a5b565b60208101620006f5828462000abc565b6040810162000b5b828562000abc565b6200075f602083018462000ac7565b60405181810167ffffffffffffffff8111828210171562000b8a57600080fd5b604052919050565b600067ffffffffffffffff82111562000baa57600080fd5b5060209081020190565b600067ffffffffffffffff82111562000bcc57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b6000620006f58262000bf9565b151590565b600160a060020a031690565b6000620006f58262000be7565b6000620006f58262000c05565b82818337506000910152565b60005b8381101562000c4857818101518382015260200162000c2e565b8381111562000c58576000848401525b5050505056fe60806040523480156200001157600080fd5b506040516080806200185c833981018060405262000033919081019062000117565b60028054600160a060020a03808716600160a060020a031992831617909255600380548684169083161790556000805484841690831617905560018054928516929091169190911790558383306200008a620000f1565b620000989392919062000192565b604051809103906000f080158015620000b5573d6000803e3d6000fd5b5060048054600160a060020a031916600160a060020a039290921691909117905550506003805460a060020a60ff021916905550620001e79050565b6040516109808062000edc83390190565b6000620001108251620001c8565b9392505050565b600080600080608085870312156200012e57600080fd5b60006200013c878762000102565b94505060206200014f8782880162000102565b9350506040620001628782880162000102565b9250506060620001758782880162000102565b91505092959194509250565b6200018c81620001c8565b82525050565b60608101620001a2828662000181565b620001b1602083018562000181565b620001c0604083018462000181565b949350505050565b6000620001d582620001db565b92915050565b600160a060020a031690565b610ce580620001f76000396000f3fe608060405234801561001057600080fd5b50600436106100c6576000357c0100000000000000000000000000000000000000000000000000000000900480634e69d5601161008e5780634e69d560146101235780637b0f9a3614610138578063aa43c93614610140578063bc307bb914610153578063ea8a1af01461015b578063f998292a14610163576100c6565b8063321c48f2146100cb578063370fcc20146100e95780633aaa5920146100f157806340ab301e146100f95780634ca334e21461010e575b600080fd5b6100d3610176565b6040516100e09190610b55565b60405180910390f35b6100d36101e1565b6100d36101f0565b61010161025b565b6040516100e09190610b7a565b61012161011c366004610981565b610352565b005b61012b610472565b6040516100e09190610b8b565b6100d36104ef565b61012161014e3660046109f3565b61055a565b6100d3610633565b610121610642565b610121610171366004610a11565b61077c565b600154600090600160a060020a031633148061019c5750600054600160a060020a031633145b806101b15750600254600160a060020a031632145b806101c65750600354600160a060020a031632145b15156101d157600080fd5b50600454600160a060020a031690565b600054600160a060020a031690565b600154600090600160a060020a03163314806102165750600054600160a060020a031633145b8061022b5750600254600160a060020a031632145b806102405750600354600160a060020a031632145b151561024b57600080fd5b50600354600160a060020a031690565b600154606090600160a060020a03163314806102815750600054600160a060020a031633145b806102965750600254600160a060020a031632145b806102ab5750600354600160a060020a031632145b15156102b657600080fd5b60048054604080517f6e81a8a30000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692636e81a8a3928282019260009290829003018186803b15801561031157600080fd5b505afa158015610325573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034d91908101906109be565b905090565b600254600160a060020a0316321461036957600080fd5b6003805474ff0000000000000000000000000000000000000000191674020000000000000000000000000000000000000000179055600480546040517f4ca334e2000000000000000000000000000000000000000000000000000000008152600160a060020a0390911691634ca334e2916103e691859101610b7a565b600060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b50506003546040513093507f7004293283c83e944feedfe102d317947bdd62fdffaa93c44ab95e20b426befd92506104679174010000000000000000000000000000000000000000900460ff1690610b8b565b60405180910390a250565b600154600090600160a060020a03163314806104985750600054600160a060020a031633145b806104ad5750600254600160a060020a031632145b806104c25750600354600160a060020a031632145b15156104cd57600080fd5b5060035474010000000000000000000000000000000000000000900460ff1690565b600154600090600160a060020a03163314806105155750600054600160a060020a031633145b8061052a5750600254600160a060020a031632145b8061053f5750600354600160a060020a031632145b151561054a57600080fd5b50600254600160a060020a031690565b600254600160a060020a0316321461057157600080fd5b600181600481111561057f57fe5b14806105965750600281600481111561059457fe5b145b15610630576003805482919074ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000008360048111156105dc57fe5b021790555060035460405130917f7004293283c83e944feedfe102d317947bdd62fdffaa93c44ab95e20b426befd916104679174010000000000000000000000000000000000000000900460ff1690610b8b565b50565b600154600160a060020a031690565b600254600160a060020a0316321461065957600080fd5b6003805474ff000000000000000000000000000000000000000019167404000000000000000000000000000000000000000017905560045460408051600080825260208201909252600160a060020a0390921691634ca334e2916106cd565b60608152602001906001900390816106b85790505b506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107069190610b69565b600060405180830381600087803b15801561072057600080fd5b505af1158015610734573d6000803e3d6000fd5b5050505030600160a060020a03167f7004293283c83e944feedfe102d317947bdd62fdffaa93c44ab95e20b426befd60046040516107729190610b8b565b60405180910390a2565b600354600160a060020a0316321461079357600080fd5b6003805474ff0000000000000000000000000000000000000000191674030000000000000000000000000000000000000000179055600480546040517f3f062270000000000000000000000000000000000000000000000000000000008152600160a060020a0390911691633f062270916103e691859101610b99565b6000601f8201831361082157600080fd5b813561083461082f82610bd1565b610baa565b81815260209384019390925082018360005b83811015610872578135860161085c88826108ec565b8452506020928301929190910190600101610846565b5050505092915050565b6000601f8201831361088d57600080fd5b815161089b61082f82610bd1565b81815260209384019390925082018360005b8381101561087257815186016108c3888261093b565b84525060209283019291909101906001016108ad565b60006108e58235610c4b565b9392505050565b6000601f820183136108fd57600080fd5b813561090b61082f82610bf2565b9150808252602083016020830185838301111561092757600080fd5b610932838284610c65565b50505092915050565b6000601f8201831361094c57600080fd5b815161095a61082f82610bf2565b9150808252602083016020830185838301111561097657600080fd5b610932838284610c71565b60006020828403121561099357600080fd5b813567ffffffffffffffff8111156109aa57600080fd5b6109b684828501610810565b949350505050565b6000602082840312156109d057600080fd5b815167ffffffffffffffff8111156109e757600080fd5b6109b68482850161087c565b600060208284031215610a0557600080fd5b60006109b684846108d9565b600060208284031215610a2357600080fd5b813567ffffffffffffffff811115610a3a57600080fd5b6109b6848285016108ec565b610a4f81610c24565b82525050565b6000610a6082610c20565b80845260208401935083602082028501610a7985610c1a565b60005b84811015610ab0578383038852610a94838351610b20565b9250610a9f82610c1a565b602098909801979150600101610a7c565b50909695505050505050565b6000610ac782610c20565b80845260208401935083602082028501610ae085610c1a565b60005b84811015610ab0578383038852610afb838351610b20565b9250610b0682610c1a565b602098909801979150600101610ae3565b610a4f81610c5a565b6000610b2b82610c20565b808452610b3f816020860160208601610c71565b610b4881610ca1565b9093016020019392505050565b60208101610b638284610a46565b92915050565b602080825281016108e58184610abc565b602080825281016108e58184610a55565b60208101610b638284610b17565b602080825281016108e58184610b20565b60405181810167ffffffffffffffff81118282101715610bc957600080fd5b604052919050565b600067ffffffffffffffff821115610be857600080fd5b5060209081020190565b600067ffffffffffffffff821115610c0957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b6000610b6382610c3f565b600060058210610c3b57fe5b5090565b600160a060020a031690565b600060058210610c3b57600080fd5b6000610b6382610c2f565b82818337506000910152565b60005b83811015610c8c578181015183820152602001610c74565b83811115610c9b576000848401525b50505050565b601f01601f19169056fea265627a7a723058204c721c2d22b91668037eddf25ae7d0595ee37a70cc802eab861e6fc948c43adc6c6578706572696d656e74616cf50037608060405234801561001057600080fd5b50604051606080610980833981018060405261002f919081019061014a565b60018054600160a060020a03808616600160a060020a031992831617909255600280548584169083161790556000805492841692909116919091178155604080516020810191829052829052610088916005919061009c565b50506006805460ff19169055506101b49050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100dd57805160ff191683800117855561010a565b8280016001018555821561010a579182015b8281111561010a5782518255916020019190600101906100ef565b5061011692915061011a565b5090565b61013491905b808211156101165760008155600101610120565b90565b600061014382516101a3565b9392505050565b60008060006060848603121561015f57600080fd5b600061016b8686610137565b935050602061017c86828701610137565b925050604061018d86828701610137565b9150509250925092565b600160a060020a031690565b60006101ae82610197565b92915050565b6107bd806101c36000396000f3fe608060405234801561001057600080fd5b5060043610610073577c010000000000000000000000000000000000000000000000000000000060003504630f399a4181146100785780633f0622701461009657806340a4895c146100ab5780634ca334e2146100c05780636e81a8a3146100d3575b600080fd5b6100806100e8565b60405161008d9190610675565b60405180910390f35b6100a96100a4366004610595565b6100f8565b005b6100b3610126565b60405161008d91906106a1565b6100a96100ce366004610558565b6101fc565b6100db610226565b60405161008d9190610689565b600054600160a060020a03165b90565b600254600160a060020a0316321461010f57600080fd5b8051610122906005906020840190610342565b5050565b600054606090600160a060020a031633148061014c5750600254600160a060020a031632145b806101615750600154600160a060020a031632145b151561016c57600080fd5b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b5050505050905090565b600154600160a060020a0316321461021357600080fd5b80516101229060049060208401906103c0565b600054606090600160a060020a031633148061024c5750600254600160a060020a031632145b806102615750600154600160a060020a031632145b151561026c57600080fd5b6004805480602002602001604051908101604052809291908181526020016000905b828210156103395760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b50505050508152602001906001019061028e565b50505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061038357805160ff19168380011785556103b0565b828001600101855582156103b0579182015b828111156103b0578251825591602001919060010190610395565b506103bc929150610419565b5090565b82805482825590600052602060002090810192821561040d579160200282015b8281111561040d57825180516103fd918491602090910190610342565b50916020019190600101906103e0565b506103bc929150610433565b6100f591905b808211156103bc576000815560010161041f565b6100f591905b808211156103bc57600061044d8282610456565b50600101610439565b50805460018160011615610100020316600290046000825580601f1061047c575061049a565b601f01602090049060005260206000209081019061049a9190610419565b50565b6000601f820183136104ae57600080fd5b81356104c16104bc826106d9565b6106b2565b81815260209384019390925082018360005b838110156104ff57813586016104e98882610509565b84525060209283019291909101906001016104d3565b5050505092915050565b6000601f8201831361051a57600080fd5b81356105286104bc826106fa565b9150808252602083016020830185838301111561054457600080fd5b61054f83828461073d565b50505092915050565b60006020828403121561056a57600080fd5b813567ffffffffffffffff81111561058157600080fd5b61058d8482850161049d565b949350505050565b6000602082840312156105a757600080fd5b813567ffffffffffffffff8111156105be57600080fd5b61058d84828501610509565b6105d38161072c565b82525050565b60006105e482610728565b808452602084019350836020820285016105fd85610722565b60005b84811015610634578383038852610618838351610640565b925061062382610722565b602098909801979150600101610600565b50909695505050505050565b600061064b82610728565b80845261065f816020860160208601610749565b61066881610779565b9093016020019392505050565b6020810161068382846105ca565b92915050565b6020808252810161069a81846105d9565b9392505050565b6020808252810161069a8184610640565b60405181810167ffffffffffffffff811182821017156106d157600080fd5b604052919050565b600067ffffffffffffffff8211156106f057600080fd5b5060209081020190565b600067ffffffffffffffff82111561071157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b6000600160a060020a038216610683565b82818337506000910152565b60005b8381101561076457818101518382015260200161074c565b83811115610773576000848401525b50505050565b601f01601f19169056fea265627a7a72305820716606d9dac79b638b79eb64138e57bb76e3c48a613bfbad163dc12a0eccdc9b6c6578706572696d656e74616cf50037a265627a7a7230582090b9021fc1386d2c50c114af147512a51a6110a717b923ff9e48b6438d317c0c6c6578706572696d656e74616cf50037608060405260c860025534801561001557600080fd5b5060405160608062001334833981018060405261003591908101906100c1565b60008054600160a060020a03808416600160a060020a03199283161790925560038054928616929091169190911780825583919060a060020a60ff0219167401000000000000000000000000000000000000000083600281111561009557fe5b021790555050505061013e565b60006100ae825161011a565b9392505050565b60006100ae825161012b565b6000806000606084860312156100d657600080fd5b60006100e286866100a2565b93505060206100f3868287016100b5565b9250506040610104868287016100a2565b9150509250925092565b600160a060020a031690565b60006101258261010e565b92915050565b60006003821061013a57600080fd5b5090565b6111e6806200014e6000396000f3fe608060405234801561001057600080fd5b5060043610610073577c01000000000000000000000000000000000000000000000000000000006000350463117334a48114610078578063122b2b5a146100a257806346bc6c88146100b75780635cd3d8da146100d7578063893d20e8146100ec575b600080fd5b61008b610086366004610a3b565b610101565b604051610099929190610c35565b60405180910390f35b6100aa6103d8565b6040516100999190610c24565b6100ca6100c5366004610a93565b610452565b6040516100999190610c13565b6100ea6100e5366004610a75565b6107b0565b005b6100f4610899565b6040516100999190610ba6565b6003546000908190600160a060020a03163214806101295750600054600160a060020a031633145b151561013457600080fd5b600060035474010000000000000000000000000000000000000000900460ff16600281111561015f57fe5b14156102c05760005b60045481101561026e5784600160a060020a031660048281548110151561018b57fe5b60009182526020918290200154604080517f7b0f9a360000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692637b0f9a3692600480840193829003018186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102259190810190610a15565b600160a060020a0316141561026657600160048281548110151561024557fe5b600091825260209091200154909350600160a060020a031691506103d19050565b600101610168565b50600354600090600160a060020a03168530866102896109c2565b6102969493929190610bba565b604051809103906000f0801580156102b2573d6000803e3d6000fd5b506000935091506103d19050565b60005b6004548110156103a85784600160a060020a03166004828154811015156102e657fe5b60009182526020918290200154604080517f3aaa59200000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633aaa592092600480840193829003018186803b15801561034857600080fd5b505afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103809190810190610a15565b600160a060020a031614156103a057600160048281548110151561024557fe5b6001016102c3565b506003546000908590600160a060020a031685306103c46109c2565b6102969493929190610bf8565b9250929050565b600354606090600160a060020a031632146103f257600080fd5b600480548060200260200160405190810160405280929190818152602001828054801561044857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161042a575b5050505050905090565b600354606090600160a060020a03163214806104785750600054600160a060020a031633145b151561048357600080fd5b600061048e836108a8565b90506060816040519080825280602002602001820160405280156104bc578160200160208202803883390190505b5090506000805b6004548110156107a6578560038111156104d957fe5b60048054839081106104e757fe5b60009182526020918290200154604080517f4e69d5600000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692634e69d56092600480840193829003018186803b15801561054957600080fd5b505afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105819190810190610ab1565b600381111561058c57fe5b141561079e57600060035474010000000000000000000000000000000000000000900460ff1660028111156105bd57fe5b14156106985760048054829081106105d157fe5b60009182526020918290200154604080517f7b0f9a360000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692637b0f9a3692600480840193829003018186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061066b9190810190610a15565b838381518110151561067957fe5b600160a060020a03909216602092830290910190910152600191909101905b600160035474010000000000000000000000000000000000000000900460ff1660028111156106c357fe5b141561079e5760048054829081106106d757fe5b60009182526020918290200154604080517f3aaa59200000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633aaa592092600480840193829003018186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107719190810190610a15565b838381518110151561077f57fe5b600160a060020a03909216602092830290910190910152600191909101905b6001016104c3565b5090949350505050565b600354600160a060020a03163214806107d35750600054600160a060020a031633145b15156107de57600080fd5b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116918217909255600354604051919281169130917f8a9208f2779a24d352064589ab804c990968f6b7568525cadfe439d89b47d1d79161088e9174010000000000000000000000000000000000000000900460ff1690610c50565b60405180910390a450565b600354600160a060020a031690565b600354600090600160a060020a03163214806108ce5750600054600160a060020a031633145b15156108d957600080fd5b6000805b6004548110156109bb578360038111156108f357fe5b600480548390811061090157fe5b60009182526020918290200154604080517f4e69d5600000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692634e69d56092600480840193829003018186803b15801561096357600080fd5b505afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061099b9190810190610ab1565b60038111156109a657fe5b14156109b3576001820191505b6001016108dd565b5092915050565b6040516104e880610cc583390190565b60006109de8235610c68565b9392505050565b60006109de8251610c68565b60006109de8235610c94565b60006109de8235610c9f565b60006109de8251610c9f565b600060208284031215610a2757600080fd5b6000610a3384846109e5565b949350505050565b60008060408385031215610a4e57600080fd5b6000610a5a85856109d2565b9250506020610a6b858286016109f1565b9150509250929050565b600060208284031215610a8757600080fd5b6000610a3384846109f1565b600060208284031215610aa557600080fd5b6000610a3384846109fd565b600060208284031215610ac357600080fd5b6000610a338484610a09565b610ad881610cae565b82525050565b610ad881610c68565b6000610af282610c64565b808452602084019350610b0483610c5e565b60005b82811015610b3457610b1a868351610ade565b610b2382610c5e565b602096909601959150600101610b07565b5093949350505050565b6000610b4982610c64565b808452602084019350610b5b83610c5e565b60005b82811015610b3457610b71868351610b94565b610b7a82610c5e565b602096909601959150600101610b5e565b610ad881610c73565b610ad881610c94565b610ad881610cb9565b60208101610bb48284610ade565b92915050565b60808101610bc88287610acf565b610bd56020830186610ade565b610be26040830185610ade565b610bef6060830184610ade565b95945050505050565b60808101610c068287610ade565b610bd56020830186610acf565b602080825281016109de8184610ae7565b602080825281016109de8184610b3e565b60408101610c438285610b8b565b6109de6020830184610b94565b60208101610bb48284610b9d565b60200190565b5190565b6000610bb482610c88565b151590565b600060038210610c8457fe5b5090565b600160a060020a031690565b6000610bb482610c68565b600060048210610c8457600080fd5b6000610bb482610c94565b6000610bb482610c7856fe608060405234801561001057600080fd5b506040516080806104e8833981018060405261002f919081019061009d565b60008054600160a060020a0319908116600160a060020a039687161790915560018054821694861694909417909355600280548416928516929092179091556003805460a060020a60ff02199316919093161716905561011b565b6000610096825161010a565b9392505050565b600080600080608085870312156100b357600080fd5b60006100bf878761008a565b94505060206100d08782880161008a565b93505060406100e18782880161008a565b92505060606100f28782880161008a565b91505092959194509250565b600160a060020a031690565b6000610115826100fe565b92915050565b6103be8061012a6000396000f3fe608060405234801561001057600080fd5b5060043610610073577c010000000000000000000000000000000000000000000000000000000060003504632e49d78b81146100785780633aaa59201461008d5780634e69d560146100ab5780637b0f9a36146100c0578063ea8a1af0146100c8575b600080fd5b61008b6100863660046102e3565b6100d0565b005b610095610146565b6040516100a29190610321565b60405180910390f35b6100b36101b1565b6040516100a29190610335565b61009561022e565b61008b610299565b600054600160a060020a03163214806100f35750600154600160a060020a031632145b15156100fe57600080fd5b6003805482919074ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000838381111561013e57fe5b021790555050565b600254600090600160a060020a031633148061016c5750600354600160a060020a031633145b806101815750600054600160a060020a031632145b806101965750600154600160a060020a031632145b15156101a157600080fd5b50600054600160a060020a031690565b600254600090600160a060020a03163314806101d75750600354600160a060020a031633145b806101ec5750600054600160a060020a031632145b806102015750600154600160a060020a031632145b151561020c57600080fd5b5060035474010000000000000000000000000000000000000000900460ff1690565b600254600090600160a060020a03163314806102545750600354600160a060020a031633145b806102695750600054600160a060020a031632145b8061027e5750600154600160a060020a031632145b151561028957600080fd5b50600154600160a060020a031690565b6003805474ff0000000000000000000000000000000000000000191674030000000000000000000000000000000000000000179055565b60006102dc823561036a565b9392505050565b6000602082840312156102f557600080fd5b600061030184846102d0565b949350505050565b61031281610343565b82525050565b61031281610379565b6020810161032f8284610309565b92915050565b6020810161032f8284610318565b600061032f8261035e565b60006004821061035a57fe5b5090565b600160a060020a031690565b60006004821061035a57600080fd5b600061032f8261034e56fea265627a7a72305820d26b6c3212508e6166474610d1755e66f078b5ebbf95ebddd41ad0cdffa0c65a6c6578706572696d656e74616cf50037a265627a7a72305820dcad74c89dd4564cd3ffb7f5bfb74287aa78c8de749c29b0a0e3cbe75c04716e6c6578706572696d656e74616cf50037a265627a7a723058202ca58628a370168a0688dff8b9a184038f0d6c6576dd6816b5791d06692922d06c6578706572696d656e74616cf50037";

    public static final String FUNC_PATIENTCREATECONNECTION = "PatientCreateConnection";

    public static final String FUNC_CREATECONSENTFILE = "createConsentFile";

    public static final String FUNC_GETCOMPANY = "getCompany";

    public static final String FUNC_REVOKECONNECTION = "RevokeConnection";

    public static final String FUNC_CREATECONSENT = "createConsent";

    public static final String FUNC_DOCTORACCEPTCONNECTION = "DoctorAcceptConnection";

    public static final String FUNC_GETCONSENTS = "GetConsents";

    public static final String FUNC_GETCONNECTIONFILE = "GetConnectionFile";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETACCEPTEDCONNECTIONS = "GetAcceptedConnections";

    public static final String FUNC_CANCELCONSENT = "cancelConsent";

    public static final String FUNC_NUMOFUSERS = "NumOfUsers";

    public static final String FUNC_REQUESTCONSENT = "requestConsent";

    public static final String FUNC_CREATECONNECTIONFILE = "createConnectionFile";

    public static final String FUNC_GETCONSENTFILE = "GetConsentFile";

    public static final String FUNC_ADDNEWUSER = "AddNewUser";

    public static final String FUNC_GETREQESTEDCONNECTIONS = "GetReqestedConnections";

    public static final String FUNC_VALIDATERECORDREQUEST = "ValidateRecordRequest";

    public static final String FUNC_DOCTOREXISTS = "DoctorExists";

    public static final Event CMSCONNECTIONSTATUSEVENT_EVENT = new Event("CMSConnectionStatusEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event CMSCONSENTCREATEDEVENT_EVENT = new Event("CMSConsentCreatedEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
    ;

    public static final Event CMSCONSENTREQUESTEDEVENT_EVENT = new Event("CMSConsentRequestedEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CMSFILECREATEDEVENT_EVENT = new Event("CMSFileCreatedEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected ConsentManagementSystem(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ConsentManagementSystem(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ConsentManagementSystem(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ConsentManagementSystem(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> PatientCreateConnection(String doctor) {
        final Function function = new Function(
                FUNC_PATIENTCREATECONNECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, doctor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createConsentFile(String _user, BigInteger role) {
        final Function function = new Function(
                FUNC_CREATECONSENTFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.generated.Uint8(role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getCompany() {
        final Function function = new Function(FUNC_GETCOMPANY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> RevokeConnection(String _conn) {
        final Function function = new Function(
                FUNC_REVOKECONNECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _conn)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createConsent(String _doctor, List<String> records) {
        final Function function = new Function(
                FUNC_CREATECONSENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _doctor), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(records, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> DoctorAcceptConnection(String patient) {
        final Function function = new Function(
                FUNC_DOCTORACCEPTCONNECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, patient)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> GetConsents() {
        final Function function = new Function(FUNC_GETCONSENTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> GetConnectionFile() {
        final Function function = new Function(FUNC_GETCONNECTIONFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> GetAcceptedConnections(String _account) {
        final Function function = new Function(FUNC_GETACCEPTEDCONNECTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> cancelConsent(String _consent) {
        final Function function = new Function(
                FUNC_CANCELCONSENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _consent)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> NumOfUsers() {
        final Function function = new Function(FUNC_NUMOFUSERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> requestConsent(String requestedDesc, String fromPatient) {
        final Function function = new Function(
                FUNC_REQUESTCONSENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(requestedDesc), 
                new org.web3j.abi.datatypes.Address(160, fromPatient)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createConnectionFile(String _user, BigInteger role) {
        final Function function = new Function(
                FUNC_CREATECONNECTIONFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.generated.Uint8(role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> GetConsentFile() {
        final Function function = new Function(FUNC_GETCONSENTFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> AddNewUser(String _user, String role) {
        final Function function = new Function(
                FUNC_ADDNEWUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Utf8String(role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> GetReqestedConnections(String _account) {
        final Function function = new Function(FUNC_GETREQESTEDCONNECTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> ValidateRecordRequest(String doctor, List<String> records) {
        final Function function = new Function(FUNC_VALIDATERECORDREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, doctor), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(records, org.web3j.abi.datatypes.Utf8String.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> DoctorExists() {
        final Function function = new Function(FUNC_DOCTOREXISTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public List<CMSConnectionStatusEventEventResponse> getCMSConnectionStatusEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CMSCONNECTIONSTATUSEVENT_EVENT, transactionReceipt);
        ArrayList<CMSConnectionStatusEventEventResponse> responses = new ArrayList<CMSConnectionStatusEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CMSConnectionStatusEventEventResponse typedResponse = new CMSConnectionStatusEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.conn = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CMSConnectionStatusEventEventResponse> cMSConnectionStatusEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CMSConnectionStatusEventEventResponse>() {
            @Override
            public CMSConnectionStatusEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CMSCONNECTIONSTATUSEVENT_EVENT, log);
                CMSConnectionStatusEventEventResponse typedResponse = new CMSConnectionStatusEventEventResponse();
                typedResponse.log = log;
                typedResponse.conn = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CMSConnectionStatusEventEventResponse> cMSConnectionStatusEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CMSCONNECTIONSTATUSEVENT_EVENT));
        return cMSConnectionStatusEventEventFlowable(filter);
    }

    public List<CMSConsentCreatedEventEventResponse> getCMSConsentCreatedEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CMSCONSENTCREATEDEVENT_EVENT, transactionReceipt);
        ArrayList<CMSConsentCreatedEventEventResponse> responses = new ArrayList<CMSConsentCreatedEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CMSConsentCreatedEventEventResponse typedResponse = new CMSConsentCreatedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.consent = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.Records = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CMSConsentCreatedEventEventResponse> cMSConsentCreatedEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CMSConsentCreatedEventEventResponse>() {
            @Override
            public CMSConsentCreatedEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CMSCONSENTCREATEDEVENT_EVENT, log);
                CMSConsentCreatedEventEventResponse typedResponse = new CMSConsentCreatedEventEventResponse();
                typedResponse.log = log;
                typedResponse.consent = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.Records = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CMSConsentCreatedEventEventResponse> cMSConsentCreatedEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CMSCONSENTCREATEDEVENT_EVENT));
        return cMSConsentCreatedEventEventFlowable(filter);
    }

    public List<CMSConsentRequestedEventEventResponse> getCMSConsentRequestedEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CMSCONSENTREQUESTEDEVENT_EVENT, transactionReceipt);
        ArrayList<CMSConsentRequestedEventEventResponse> responses = new ArrayList<CMSConsentRequestedEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CMSConsentRequestedEventEventResponse typedResponse = new CMSConsentRequestedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.consent = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.desc = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CMSConsentRequestedEventEventResponse> cMSConsentRequestedEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CMSConsentRequestedEventEventResponse>() {
            @Override
            public CMSConsentRequestedEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CMSCONSENTREQUESTEDEVENT_EVENT, log);
                CMSConsentRequestedEventEventResponse typedResponse = new CMSConsentRequestedEventEventResponse();
                typedResponse.log = log;
                typedResponse.consent = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.desc = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CMSConsentRequestedEventEventResponse> cMSConsentRequestedEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CMSCONSENTREQUESTEDEVENT_EVENT));
        return cMSConsentRequestedEventEventFlowable(filter);
    }

    public List<CMSFileCreatedEventEventResponse> getCMSFileCreatedEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CMSFILECREATEDEVENT_EVENT, transactionReceipt);
        ArrayList<CMSFileCreatedEventEventResponse> responses = new ArrayList<CMSFileCreatedEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CMSFileCreatedEventEventResponse typedResponse = new CMSFileCreatedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.factory = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.file = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CMSFileCreatedEventEventResponse> cMSFileCreatedEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CMSFileCreatedEventEventResponse>() {
            @Override
            public CMSFileCreatedEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CMSFILECREATEDEVENT_EVENT, log);
                CMSFileCreatedEventEventResponse typedResponse = new CMSFileCreatedEventEventResponse();
                typedResponse.log = log;
                typedResponse.factory = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.file = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CMSFileCreatedEventEventResponse> cMSFileCreatedEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CMSFILECREATEDEVENT_EVENT));
        return cMSFileCreatedEventEventFlowable(filter);
    }

    @Deprecated
    public static ConsentManagementSystem load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ConsentManagementSystem(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ConsentManagementSystem load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ConsentManagementSystem(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ConsentManagementSystem load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ConsentManagementSystem(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ConsentManagementSystem load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ConsentManagementSystem(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ConsentManagementSystem> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _company) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_company)));
        return deployRemoteCall(ConsentManagementSystem.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ConsentManagementSystem> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _company) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_company)));
        return deployRemoteCall(ConsentManagementSystem.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ConsentManagementSystem> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _company) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_company)));
        return deployRemoteCall(ConsentManagementSystem.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ConsentManagementSystem> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _company) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_company)));
        return deployRemoteCall(ConsentManagementSystem.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CMSConnectionStatusEventEventResponse extends BaseEventResponse {
        public String conn;

        public BigInteger status;
    }

    public static class CMSConsentCreatedEventEventResponse extends BaseEventResponse {
        public String consent;

        public List<String> Records;
    }

    public static class CMSConsentRequestedEventEventResponse extends BaseEventResponse {
        public String consent;

        public String desc;
    }

    public static class CMSFileCreatedEventEventResponse extends BaseEventResponse {
        public String factory;

        public String owner;

        public String user;

        public String file;
    }
}
